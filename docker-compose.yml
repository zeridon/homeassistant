---
version: "3.7"

# networks for comm
networks:
  default:
    driver: bridge
  socket_proxy:
    external:
      name: socket_proxy

services:
  proxy:
    restart: always
    image: jwilder/nginx-proxy
    volumes:
      - "proxy-certs:/etc/nginx/certs:ro"
      - "proxy-html:/usr/share/nginx/html"
      - "proxy-vhost.d:/etc/nginx/vhost.d"
        #- "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "./proxy/conf.d/block-abuses.conf:/etc/nginx/vhost.d/default"
    ports:
      - "80:80"
      - "443:443"
    environment:
      ENABLE_IPV6: 'false'
      DEFAULT_HOST: "${HA_DOMAIN:-homeauto.local}"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen
    networks:
      - default
      - socket_proxy
    depends_on:
      - socket-proxy

  sslgen:
    restart: always
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - "proxy-certs:/etc/nginx/certs"
      - "proxy-html:/usr/share/nginx/html"
      - "proxy-vhost.d:/etc/nginx/vhost.d"
        #- "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      DEFAULT_EMAIL: "${HA_CERT_EMAIL:-some@mail.com}"
      DOCKER_HOST: tcp://socket-proxy:2375
    depends_on:
      - proxy
      - socket-proxy
    networks:
      - default
      - socket_proxy

  homeassistant:
    restart: always
    image: homeassistant/home-assistant:0.118.4
    expose:
      - "8123"
    volumes:
      - "./homeassistant-config:/config"
    environment:
      VIRTUAL_HOST: "${HA_DOMAIN:-homeauto.local}"
      VRTUAL_PORT: "8123"
      VIRTUAL_PROTO: 'http'
      HSTS: 'off'
      LETSENCRYPT_HOST: "${HA_DOMAIN:-homeauto.local}"
    depends_on:
      - mqtt
      - proxy
      - repeater
    networks:
      - default

  mqtt:
    restart: always
    image: eclipse-mosquitto:1.6.12
    user: "1001:1001"
    volumes:
      - "./mosquitto/config:/mosquitto/config"
      - "./mosquitto/log:/mosquitto/log"
      - "./mosquitto/data:/mosquitto/data"
    ports:
      - "1883:1883"
    command: /usr/sbin/mosquitto -c /mosquitto/config/mosquitto.conf
    networks:
      - default

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    restart: always
    networks:
      socket_proxy:
    privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=warning # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      - DELETE=1 # Watchtower
        # GET Optons
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer, Watchtower
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer, Watchtower
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer
      # POST Options
      - CONTAINERS_CREATE=1 # WatchTower
      - CONTAINERS_START=1 # WatchTower
      - CONTAINERS_UPDATE=1 # WatchTower
      # DELETE Options
      - CONTAINERS_DELETE=1 # WatchTower
      - IMAGES_DELETE=1 # WatchTower

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron:latest
    restart: unless-stopped
    networks:
      - socket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - ./docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 86400
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: ${TZ:-Etc/UTC}
      DOCKER_HOST: tcp://socket-proxy:2375
    depends_on:
      - socket-proxy

  # mDNS/Bonjour/SSDP repeater
  # based on https://github.com/alsmith/multicast-relay
  # unfortunately has to run in host mode.
  #
  # to discover shellies: --relay '224.0.1.187:5683'
  # Used to enable discovery ... though if it is going to be used is another story
  repeater:
    image: zeridon/multicast-relay
    build:
      context: https://github.com/alsmith/multicast-relay.git
    restart: always
    network_mode: "host"
    command: --verbose --noSonosDiscovery --interfaces ${RELAY_INTERFACES}

  # InfluxDB - Database for sensor data
  # Create influxdb.conf
  influxdb:
    image: influxdb:latest
    restart: always
    networks:
      - default
    security_opt:
      - no-new-privileges:true
    expose:
      - "8086"
    volumes:
      # - $DOCKERDIR/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - ./influxdb/db:/var/lib/influxdb

  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    networks:
      - default
    security_opt:
      - no-new-privileges:true
    ports:
       - "3000:3000"
    user: "0"
    volumes:
      - ./grafana:/var/lib/grafana
    # environment:
    # yamllint disable-line rule:line-length
    #   GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"

volumes:
  proxy-certs:
  proxy-vhost.d:
  proxy-html:
